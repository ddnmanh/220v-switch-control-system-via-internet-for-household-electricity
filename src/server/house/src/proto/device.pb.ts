// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.29.2
// source: device.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Struct } from "./google/protobuf/struct.pb";

export const protobufPackage = "device";

/** Common */
export interface FieldError {
  property: string;
  message: string;
}

export interface CommonRes {
  code: number;
  status: string;
  message: FieldError[];
  data: { [key: string]: any } | undefined;
}

/** Get device info */
export interface GetDeviceInfoReq {
  deviceId: string;
}

/** Create device */
export interface CreateDeviceReq {
  name: string;
  type: string;
  desc: string;
  apSsid: string;
}

/** Update device */
export interface UpdateDeviceReq {
  deviceId: string;
  name: string;
  desc: string;
  apPassword: string;
}

/** Delete device */
export interface DeleteDeviceReq {
  deviceId: string;
}

export const DEVICE_PACKAGE_NAME = "device";

wrappers[".google.protobuf.Struct"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;

export interface DeviceServiceClient {
  getDeviceInfo(request: GetDeviceInfoReq): Observable<CommonRes>;

  createDevice(request: CreateDeviceReq): Observable<CommonRes>;

  updateDevice(request: UpdateDeviceReq): Observable<CommonRes>;

  deleteDevice(request: DeleteDeviceReq): Observable<CommonRes>;
}

export interface DeviceServiceController {
  getDeviceInfo(request: GetDeviceInfoReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  createDevice(request: CreateDeviceReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  updateDevice(request: UpdateDeviceReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  deleteDevice(request: DeleteDeviceReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;
}

export function DeviceServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getDeviceInfo", "createDevice", "updateDevice", "deleteDevice"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DeviceService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DeviceService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DEVICE_SERVICE_NAME = "DeviceService";
