// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v5.29.2
// source: SysOpenration.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Struct } from "./google/protobuf/struct.pb";

export const protobufPackage = "SysOpenration";

/** Common */
export interface FieldError {
  property: string;
  message: string;
}

export interface CommonRes {
  code: number;
  status: string;
  message: FieldError[];
  data: { [key: string]: any } | undefined;
}

/** Get device info */
export interface GetHistoryDeviceReq {
  idDevice: string;
  idHouse: string;
  mqttTopic: string;
}

export const SYS_OPENRATION_PACKAGE_NAME = "SysOpenration";

wrappers[".google.protobuf.Struct"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;

export interface SysOpenrationServiceClient {
  getHistoryDeviceInfo(request: GetHistoryDeviceReq): Observable<CommonRes>;
}

export interface SysOpenrationServiceController {
  getHistoryDeviceInfo(request: GetHistoryDeviceReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;
}

export function SysOpenrationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getHistoryDeviceInfo"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("SysOpenrationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("SysOpenrationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SYS_OPENRATION_SERVICE_NAME = "SysOpenrationService";
