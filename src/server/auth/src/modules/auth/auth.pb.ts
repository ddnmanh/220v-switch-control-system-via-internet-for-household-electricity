// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.29.2
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { Struct } from "./google/protobuf/struct.pb";

export const protobufPackage = "auth";

/** Common */
export interface FieldError {
  property: string;
  message: string;
}

export interface CommonRes {
  code: number;
  status: string;
  message: FieldError[];
  data: { [key: string]: any } | undefined;
}

/** Register */
export interface RegisterReq {
  firstname: string;
  lastname: string;
  username: string;
  password: string;
  email: string;
}

export interface ResendOTPVerifyRegisterAccountReq {
  idRegister: number;
  email: string;
}

/** Verify OTP when register account */
export interface OTPVerifyRegisterAccountReq {
  email: string;
  otp: string;
}

/** SignIn */
export interface SignInReq {
  username: string;
  password: string;
}

/** Validate token */
export interface ValidateTokenReq {
  token: string;
  type: string;
}

export const AUTH_PACKAGE_NAME = "auth";

wrappers[".google.protobuf.Struct"] = { fromObject: Struct.wrap, toObject: Struct.unwrap } as any;

export interface AuthServiceClient {
  register(request: RegisterReq): Observable<CommonRes>;

  resendOtpVerifyRegisterAccount(request: ResendOTPVerifyRegisterAccountReq): Observable<CommonRes>;

  otpVerifyRegisterAccount(request: OTPVerifyRegisterAccountReq): Observable<CommonRes>;

  signIn(request: SignInReq): Observable<CommonRes>;

  validateToken(request: ValidateTokenReq): Observable<CommonRes>;
}

export interface AuthServiceController {
  register(request: RegisterReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  resendOtpVerifyRegisterAccount(
    request: ResendOTPVerifyRegisterAccountReq,
  ): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  otpVerifyRegisterAccount(
    request: OTPVerifyRegisterAccountReq,
  ): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  signIn(request: SignInReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;

  validateToken(request: ValidateTokenReq): Promise<CommonRes> | Observable<CommonRes> | CommonRes;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "register",
      "resendOtpVerifyRegisterAccount",
      "otpVerifyRegisterAccount",
      "signIn",
      "validateToken",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
